name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  # Continuous Integration Job
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: devClass/package-lock.json
        
    - name: Install dependencies
      run: |
        cd devClass
        npm ci
        
    - name: Run linter
      run: |
        cd devClass
        npm run lint
        
    - name: Run type check
      run: |
        cd devClass
        npm run typecheck || echo "No typecheck script found"
        
    - name: Run tests
      run: |
        cd devClass
        npm run test:ci || echo "No tests configured yet"
        
    - name: Build application
      run: |
        cd devClass
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: devClass/dist
        retention-days: 1
        
  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: devClass/package-lock.json
      - name: Install dependencies
        run: |
          cd devClass
          npm ci
      - name: Run tests with coverage
        run: |
          cd devClass
          npm run test:coverage
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: devClass
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Deploy to VM
  deploy:
    name: Deploy to VM
    needs: [ci, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://app-schooldev.duckdns.org
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: devClass/dist
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./devClass
        push: true
        tags: |
          matias151/schooldev_front:latest
          matias151/schooldev_front:${{ github.sha }}
        labels: |
          org.opencontainers.image.title=SchoolDev Frontend
          org.opencontainers.image.description=React frontend for SchoolDev platform
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to VM
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          # Setup project directory if not exists
          if [ ! -d "/home/azureuser/Projet_file_rouge_FRONT" ]; then
            echo "Cloning repository for first time..."
            cd /home/azureuser/
            git clone https://github.com/${{ github.repository }}.git Projet_file_rouge_FRONT
          fi
          
          # Create web network if not exists (shared with backend)
          docker network create web || true
          
          # Deploy application
          cd /home/azureuser/Projet_file_rouge_FRONT
          git fetch
          git checkout main
          git pull origin main
          
          # Pull and start new container
          docker-compose pull frontend
          docker-compose up -d frontend
        
    - name: Create deployment notification
      run: |
        echo "ðŸš€ Successfully deployed to VM!"
        echo "Version: ${{ github.sha }}"
        echo "Environment: https://schooldev.duckdns.org"
        echo "Container: schooldev_front"
